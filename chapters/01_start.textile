h1. Start.

There are couple of open source Merb book attempts but they all explain
how to use Merb. As occasional Merb contributor I always wanted a book that
really saves my time when it comes to understanding how things work inside
of the framework. Merb is meant to be highly hackable after all.

So I decided to write this little book about Merb internals.

h2. Foreword.

* Hacker's framework needs hacker's handbook.
	 
h2. What happens when you run merb executable.

* Start.
* Arguments parsing.
* Server start.
* Framework boot.

h2. Then request comes in.

* Merb on Rack.
* Rackup.
* Dispatch.
* Filters
* Sessions.
* MIME formats and what's behind "provides API".
* Rendering overview.
* Template inlining.
* Router internals.
* Merb application server in details.
* Plugins.

h2. Plugins.
	 
** DataMapper plugin.
** Sequel plugin.
** ActiveRecord plugin.
** Slices.
** Merb action-args.
** Merb auth.
** Merb Haml plugin.
** Merb parts.

h2. Development.

* Overview.
* Public and private specs.
* Repository organization.


h2. Foreword

Knowing how tools you use work under the covers is a huge win for every
developer out there and Merb is small and clean enough for everyone to
understand it in short period of time. You can learn a lot about HTTP,
web frameworks design and even hidden gems of Ruby web servers
(how many of you know that Thin can actually serve requests in
threads and not block the event loop?).

Understanding Merb helps a lot in understanding Ruby on Rails,
Django, TurboGears and (to some extent)
virtually any other framework out there. I encourage you read
this little handbook 10 times before you call yourself familiar
with Merb. I must confess I have no will to do so myself. But
you can do better.

Once you are done, dive into Django, Rails or whatever it may
be. Go to project tracker, find a ticket that relates to some
area you feel you know best and fix the problem. Contribute
a patch, make the tool that is freely available to you better,
understand what it takes to give your work away for free to the
community and why open source is such a wild fire Internet
is built upon.

And, by the way. If you find this book useful, do me a favor.
I need no money from you. Just take my advice seriously.
Read source code of projects that you rely on, whether it is
Django, Merb, Nginx, DataMapper, Twisted, PostgreSQL or Matz's Ruby VM. Understand
how they work, get better, and maybe even do a small contribution.
But never stop exploring more and more. This is the only
exercise you need to become a better software engineer. At least,
this is what I learn again and again.

